#include <iostream>
#include <cmath>

double add(double num1, double num2) {
    return num1 + num2;
}

double subtract(double num1, double num2) {
    return num1 - num2;
}

double multiply(double num1, double num2) {
    return num1 * num2;
}

double divide(double num1, double num2) {
    if (num2 == 0) {
        throw std::invalid_argument("Division by zero is not allowed");
    }
    return num1 / num2;
}

double modulus(double num1, double num2) {
    if (num2 == 0) {
        throw std::invalid_argument("Division by zero is not allowed");
    }
    return std::fmod(num1, num2);
}

double power(double num1, double num2) {
    return std::pow(num1, num2);
}

double root(double num1, double num2) {
    if (num1 < 0 && num2 % 2 == 0) {
        throw std::invalid_argument("Negative numbers cannot have even root");
    }
    return std::pow(num1, 1.0 / num2);
}

int main() {
    double num1, num2;
    char operator_ch;

    std::cout << "Enter the first number: ";
    std::cin >> num1;

    std::cout << "Enter the second number: ";
    std::cin >> num2;

    std::cout << "Enter the operator (+, -, *, /, %, ^, or r): ";
    std::cin >> operator_ch;

    try {
        switch (operator_ch) {
            case '+':
                std::cout << "Result: " << add(num1, num2) << std::endl;
                break;
            case '-':
                std::cout << "Result: " << subtract(num1, num2) << std::endl;
                break;
            case '*':
                std::cout << "Result: " << multiply(num1, num2) << std::endl;
                break;
            case '/':
                std::cout << "Result: " << divide(num1, num2) << std::endl;
                break;
            case '%':
                std::cout << "Result: " << modulus(num1, num2) << std::endl;
                break;
            case '^':
                std::cout << "Result: " << power(num1, num2) << std::endl;
                break;
            case 'r':
                std::cout << "Result: " << root(num1, num2) << std::endl;
                break;
            default:
                std::cout << "Invalid operator. Please try again." << std::endl;
                break;
        }
    } catch (const std::invalid_argument& ia) {
        std::cerr << "Error: " << ia.what() << std::endl;
    }

    return 0;
}
